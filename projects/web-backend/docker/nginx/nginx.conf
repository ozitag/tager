map $http_user_agent $unsupported {
    default                                 0;
    "~MSIE [1-9]\."                         1;
    "~Trident/"                             1;
    "~Mozilla.*Firefox/[1-9]\."             1;
    "~Mozilla.*Firefox/[0-2][0-9]\."        1;
    "~Mozilla.*Firefox/3[0-1]\."            1;
    "~Opera.*Version/[0-9]\."               1;
    "~Opera.*Version/[0-1][0-9]\."          1;
    "~Opera.*Version/2[0-1]\."              1;
    "~Chrome/[0-9]\."                       1;
    "~Chrome/[0-2][0-9]\."                  1;
    "~Chrome/3[0-3]\."                      1;
}

server {
    listen 80;
    charset utf-8;
    root /var/www;

    # security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header X-Powered-By "TAGER (OZiTAG)";

    error_page 502 /502.html;
    location = /502.html { root /var/www/errors/; }
    error_page 503 /503.html;
    location = /503.html { root /var/www/errors/; }
    error_page 504 /504.html;
    location = /504.html { root /var/www/errors/; }

    if ($unsupported = 1){
        rewrite ^ /unsupported last;
    }

    location ^~ /unsupported {
        root /var/www/errors/;
        try_files $uri $uri.html =404;
    }


    location /uploads {
        expires max;
        root /var/www;
    }

    # . files (e.g. .env)
    location ~ /\.(?!well-known) {
        deny all;
    }

    location = /sitemap.xml {
        proxy_pass http://backend:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "upgrade";
    }

    location / {
        # Rewrite from /page/ to /page
        rewrite ^/(.*)/$ /$1 permanent;

        proxy_pass http://web:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # redirect from /api to /api/
    location = /api {
        if ($http_x_custom_scheme) {
            rewrite ^([^.]*[^/])$ $http_x_custom_scheme://$http_host/api/ permanent;
        }

        rewrite ^([^.]*[^/])$ $1/ permanent;
    }

    location @php {
        proxy_pass http://backend:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        if ($http_origin ~* "^http://localhost:(3000|8080|8081|8082|4000)$") {
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, PUT, POST, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        }
    }

    location ^~ /api/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        rewrite ^/api/?(.*)?$ /$1 break;

        try_files /http-cache$uri?$query_string.json /http-cache$uri.json @php;
    }
}
